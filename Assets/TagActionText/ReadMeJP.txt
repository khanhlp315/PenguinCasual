

 #####  Tag Action Text  #####


テキスト文中で使用できる独自の<タグ>を作り、それにアクションを関連付けることができます。
この機能の判りやすく一般的な挙動は、テキスト文中のある部分をクリックしたらウェブサイトを開くものでしょう、htmlのリンクのように。
それに留まらず、あなたが作ったタグと関数を自由に紐付けられます。
Unity標準の<b>タグを使って太字にするのと同じ感覚で、自身で作った<myTag>で囲った部分にアクションを持たせる事ができます。
或いはタグではなく文字列そのものを登録して、テキスト文中の該当文字列全てに自動でアクションを持たせる事もできます。
UGUI-TextとTextMeshPro(UI)どちらにも対応しており、置き換えて使用するだけで標準機能をそのまま使いつつタグ機能を付け加えられます。
アクションはManagerで管理するのでテキスト文やタグはそのままで紐付いたアクションだけランタイムで切り替えるのも簡単です。
クリック判定に注意して作られているため、画面スクロールなどの別操作時にテキストのリンクが誤作動してあなたのユーザがイライラするといったよくある事例も抑えられます。



========== 使用例 ==========

- 長いテキスト中の所々にウェブサイト等へのリンクを作る
- カードゲームのカード効果説明文やアイテム合成ゲームのアイテム説明文中に他の関連カード/アイテムが出てくる場合に、関連名を強調してそこをクリックすればその画像や注釈文の小窓を表示
- 犯人の証言の中の様々な単語をクリックする事で主人公がそれを考察したり、矛盾した単語を選ぶと問い詰めて次の展開へ進むような謎解きゲームや論争ゲーム
- 会話文をクリックすると音声が流れる言語学習系や異性キャラとの会話ゲーム
等々

このような実装やその修正が簡単に行えるようになります。
例のような挙動をテキスト中に混在させたり、ランタイムにJSON等からテキスト内容を流し込みつつアクションを持たせる場合、テキストはそのままで紐付いたアクションだけを切り替えたい場合などに更に力を発揮します。
使用言語やデータ量軽減などの理由でTextMeshProが使えずUGUI-Text上でこのような動作を作りたい場合は、unity標準の機能だけでは難があるため特にこのアセットが役立ちます。
労力的に困難だったテキストギミックも色々行えるようになるはずです。



========== 使用方法 ==========

このアセットの全てはProjectウインドウにおけるTagActionTextフォルダに収められています。


1) UnityEditorの上部メニューで Tools > TagActionText > Create GameObject > TagActionManager を選択してシーン内にTagActionManagerオブジェクトを設置します。
あるいはProjectウインドウのScriptフォルダ内からTagActionManager.csをシーン内の判りやすいGameObjectにアタッチしてもかまいません。
このTagActionManagerのInspectorウインドウでタグ登録を行います。
TagActionManagerの各項目の詳細はこの次の"各設定"の欄で行うのでここでは割愛します。


2) UGUI-Textでタグ機能を使用したい場合は、それに代わってTagActionTextコンポーネントを使用します。
UnityEditorの上部メニューで Tools > TagActionText > Create GameObject > UGUI-Text を選択してシーン内にTagActionTextオブジェクトを設置するか、TagActionText.csをシーン内のGameObjectにアタッチしてください。
TextMeshProに代わる場合はTagActionTMPGUIコンポーネントを使用します。
その場合はUnityEditorの上部メニューで Tools > TagActionText > Create GameObject > TextMeshProUGUI を選択してシーン内にTagActionTMPUGUIオブジェクトを設置するか、TagActionTMPUGUI.csをシーン内のGameObjectにアタッチしてください。


3) 最後に 2)のInspectorウインドウのTagManagerの項目に 1)で設置したTagActionManagerをアサインします。
これにより同じテキストのままManagerを替えて別のアクションを紐付けるような使い方も可能ですが、アサインを忘れないように行ってください。


あとは通常のテキストと同じように使用するだけです。
TagActionManagerで設定したタグをテキスト文中に記述すればゲームシーン内のその部分のテキストには自動的にタグのアクションが付与されます。


* 通常のUGUIのクラスを継承しているので標準のUGUIが必要とするCanvasやEventSystemは同様に必要とします。またGameObjectに必要なRectTransformやCanvasRendererも同様に必要です。

* スクリプト内からテキストを書き換えたりする場合はUGUITagActionText名前空間を使用してください。

* このアセットのタグ範囲内に更にタグが含まれる(入れ子になる)場合、入れ子のタグは判定せずただの文字列として扱います。タグの書式によって多重ループによる余計な負荷が発生しないようにするためです。

* TextMeshProUGUIの対応は、正式版としてunityに標準搭載された2018.3以降になります。
また、TextMeshProUGUIの継承を前提としていない部分に対しての機能実装に当たってRichTextを使用しているため、TagActionTMPUGUI版ではいくつか注意点があります。
- RichTextをfalseにする事はできません。
- コンポーネントから現在のテキスト文を取得したい場合は、GetText()メソッドを使って下さい。
- このアセットで作成したタグと、TextMeshProのRichTextのタグの一部(color,link)を干渉するように使うと正常に動作しない場合があります。



========== 各設定 ==========

TagActionManagerの各項目の説明です。


最初のstring欄でタグにする文字列を登録する
例えばmyTagと登録すれば<myTag>というようになる



[TagType]
タグの記述方式をドロップダウンから選ぶ

Enclosure:タグで囲った部分にアクションを持たせ、タグで囲った部分の文字列を受け取る
例)<Tag>xxx</Tag> としてxxxの部分を引数とする

Addition:タグで囲った部分にアクションを持たせ、開始タグ内で=の後に""で囲って記述した文字列を受け取る
例)<Tag="xxx">abcde</Tag> としてxxxの部分を引数とする(htmlに近い書式)

Self:タグとして登録した文字列そのものにアクションを持たせ、その文字列を受け取る
例)タグ文字列にunityと登録してテキスト文中の全ての"unity"の文字部分がタグで囲まずとも自動でアクションが付与される、引数も"unity"の文字列になる

* TagTypeがEnclosureかAdditionの場合、タグ文字列として使用するのは半角英数のみです。



[Text Color]
チェックをしてカラーを設定すればタグ効果範囲内のテキストがその色になる
チェックを外すと他の通常のテキストと同色のままでアクションを持つ



[Action]
string,Vector2を受け取る関数を登録するUnityEvent
受け取るstringはTagTypeの項目で設定した引数、Vector2はクリックが発生したScreenPoint
(汎用的なアセットとしてInspectorの単純化のために引数を受け取る関数でなければならなくなっています。仮に必要なくともstring,Vector2を受け取る形で関数を記述してください。実例としてDemoシーンのTagActionExample.csを見てください。)

!Inpotant!
タグからの引数を受け取る場合、Actionに関数を登録する際のドロップダウンは Dynamic の項目内から選んでください。



[Tapped Text Color]
チェックしてカラーを設定すればクリックされた後のテキストがその色になる



===============================================================


製作者: Myouji
myoujing4@gmail.com

デモの一部の素材は以下のライセンスに基づいて使用しています。
http://unity-chan.com/contents/license_jp/
このアセットの作成に当たってMITライセンスに基づいて以下を参考にしました。ありがとうございます。
https://github.com/setchi/uGUI-Hypertext


